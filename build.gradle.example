import java.nio.file.Files
import java.nio.file.NoSuchFileException
import java.nio.file.Paths
import java.util.regex.Pattern
import java.util.zip.ZipFile

subprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'

    dependencies {
        //implementation group: 'org.osgi', name: 'osgi.core', version: '7.0.0'
        //providedCompile group: 'org.osgi', name: 'org.osgi.core', version: '6.0.0'
    }

    jar {
        onlyIf { !compileJava.source.empty }
        manifest {
            def manif = "${projectDir}/META-INF/MANIFEST.MF"
            if (new File(manif).exists()) {
                from(manif)
            }
        }
    }
}

static def readBundleManifest(java.nio.file.Path bundlePath) {
    if (bundlePath.toFile().isDirectory()) {
        new FileInputStream(bundlePath.resolve("META-INF").resolve("MANIFEST.MF").toFile()).withCloseable {
            return new java.util.jar.Manifest(it)
        }
    } else {
        new ZipFile(bundlePath.toFile()).withCloseable {
            it.getInputStream(it.getEntry("META-INF/MANIFEST.MF")).withCloseable {
                return new java.util.jar.Manifest(it)
            }
        }
    }
}

static List<String> readReexportedRequiredBundles(java.util.jar.Manifest manifest) {
    final def reexportedBundlePattern = Pattern.compile('(^|,)([^;]+);(bundle-version[^;]+;)?visibility:=reexport')
    final def bundlesListAttribute = manifest.getMainAttributes().getValue("Require-Bundle");
    if(bundlesListAttribute == null) {
        return Collections.emptyList()
    }
    def matcher = reexportedBundlePattern.matcher(bundlesListAttribute);
    def returnedBundles = new ArrayList<String>();
    for(int startIndex = 0; matcher.find(startIndex); startIndex = matcher.end()) {
        returnedBundles.add(matcher.group(2));
    }
    return returnedBundles;
}


def analyzeBundleForTransitiveDependencies(java.nio.file.Path jarFile, Set<String> alreadyImportedBundles) {
    def requiredBundles = readReexportedRequiredBundles(readBundleManifest(jarFile))
    def bundleJarsToAdd = new HashSet<String>();
    requiredBundles.stream()
        .map({ recurseP2bundle(it, alreadyImportedBundles) })
            .forEach({ bundleJarsToAdd.addAll(it.toList()) })
    return bundleJarsToAdd
/*
    return files(Files.walk(jarFile).filter({
        it.getName(it.getNameCount() - 1).toString().endsWith('.jar')
    }).collect())
*/
}

private def recurseP2bundle(String name, Set<String> alreadyImportedBundles) {
    if (!alreadyImportedBundles.add(name)) {
        return Collections.emptySet()
    }
    def pluginsFolder = Paths.get('/home/lx/Dokumente/Projects/eclipse/plugins')
    def jarFile = Files.walk(pluginsFolder, 1)
            .filter({ it.getName(it.getNameCount() - 1).toString().startsWith(name + '_') })
            .sorted({a,b -> -a.toString().compareToIgnoreCase(b.toString())})
            .findFirst()
            .orElseThrow({ new NoSuchFileException(pluginsFolder.resolve(name + '.jar').toString()) })

    def dependencies = new HashSet<String>()
    dependencies.add(jarFile.toString())
    dependencies.addAll(analyzeBundleForTransitiveDependencies(jarFile, alreadyImportedBundles))
    return dependencies;
}

def p2bundle(String name, version = '') {
    return files(recurseP2bundle(name, new HashSet<>()))
}

apply from: 'subprojects.gradle'
