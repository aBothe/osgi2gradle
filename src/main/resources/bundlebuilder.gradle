import org.w3c.dom.Document
import org.w3c.dom.Element
import javax.xml.parsers.DocumentBuilderFactory
import java.nio.file.Paths
import java.util.regex.Pattern
import java.util.stream.Collectors
import java.util.stream.IntStream
import java.util.zip.ZipFile

apply plugin: 'base'

class BundleInfo implements Comparable<BundleInfo> {
    String id
    String version
    java.nio.file.Path path

    @Override
    int hashCode() {
        return path.hashCode()
    }

    @Override
    boolean equals(Object obj) {
        return obj instanceof BundleInfo && ((BundleInfo) obj).path.equals(path)
    }

    @Override
    int compareTo(BundleInfo bundleInfo) {
        return path.compareTo(bundleInfo.path)
    }
}

class Properties {
    static reexportedBundlePattern =
            Pattern.compile('([\\w-._]+)(;[\\w-]+:?=("[^"]+"|[^,;]+))*')
    static cachedResolvedBundles = new HashMap<String, FileCollection>()
    static installedBundles = new TreeSet<BundleInfo>();
}

Properties.cachedResolvedBundles.clear()

private static def readBundleManifest(java.nio.file.Path bundlePath) {
    if (bundlePath.toFile().isDirectory()) {
        new FileInputStream(bundlePath.resolve("META-INF").resolve("MANIFEST.MF").toFile()).withCloseable {
            return new java.util.jar.Manifest(it)
        }
    } else {
        new ZipFile(bundlePath.toFile()).withCloseable {
            it.getInputStream(it.getEntry("META-INF/MANIFEST.MF")).withCloseable {
                return new java.util.jar.Manifest(it)
            }
        }
    }
}

private static List<String> readReexportedRequiredBundles(java.util.jar.Manifest manifest) {
    final def bundlesListAttribute = manifest.getMainAttributes().getValue("Require-Bundle");
    if (bundlesListAttribute == null) {
        return Collections.emptyList()
    }
    def matcher = Properties.reexportedBundlePattern.matcher(bundlesListAttribute)
    def results = new ArrayList<String>()
    for (int startIndex = 0; matcher.find(startIndex); startIndex = matcher.end()) {
        if (!matcher.group().contains("resolution:=optional")) {
            results.add(matcher.group(1))
        }
    }
    return results
}

private static List<String> readBundleClasspath(java.util.jar.Manifest manifest) {
    final def bundlesListAttribute = manifest.getMainAttributes().getValue("Bundle-ClassPath")
    if (bundlesListAttribute == null) {
        return Collections.emptyList()
    }
    return Arrays.stream(bundlesListAttribute.split(','))
            .map({ it.trim() })
            .filter({ !".".equals(it) })
            .collect(Collectors.toList())
}

private static def enlistInstalledBundle(java.util.jar.Manifest manifest, java.nio.file.Path ofBundle) {
    def bundle = new BundleInfo()
    bundle.id = manifest.getMainAttributes().getValue("Bundle-SymbolicName")
    def semicolonIndex = bundle.id.indexOf(';') // that singleton-name attribute...
    if (semicolonIndex != -1) {
        bundle.id = bundle.id.substring(0, semicolonIndex)
    }
    bundle.version = manifest.getMainAttributes().getValue("Bundle-Version")
    bundle.path = ofBundle

    Properties.installedBundles.add(bundle)
}

private def analyzeBundleForTransitiveDependencies(java.nio.file.Path ofBundle, Set<String> alreadyImportedBundles) {
    final def manifest = readBundleManifest(ofBundle)
    def requiredBundles = readReexportedRequiredBundles(manifest)
    def bundleJarsToAdd = files()
    def nestedJarsOnClasspath = readBundleClasspath(manifest)
    if (!nestedJarsOnClasspath.isEmpty()) {
        if (ofBundle.toFile().isDirectory()) {
            bundleJarsToAdd += fileTree(dir: ofBundle, includes: nestedJarsOnClasspath)
        } else {
            bundleJarsToAdd += zipTree(ofBundle).filter {
                File file -> nestedJarsOnClasspath.stream().anyMatch({ file.path.replace('\\','/').endsWith(it) })
            }
        }
    }

    enlistInstalledBundle(manifest, ofBundle)

    requiredBundles.stream()
            .map({ recurseP2bundle(it, alreadyImportedBundles) })
            .forEach({ bundleJarsToAdd += it })
    return bundleJarsToAdd
}

class P2RepositoryLoader {
    private final URI repositoryUri
    private final java.nio.file.Path basePath
    private final java.nio.file.Path pluginsPath

    static class BundleAttributes {
        String version
        boolean isDirectory
    }

    private Map<String, BundleAttributes> bundleVersions

    P2RepositoryLoader(URI repository, java.nio.file.Path projectBasePath) {
        this.repositoryUri = repository
        this.basePath = projectBasePath.resolve('.p2cache')
        this.pluginsPath = basePath.resolve("plugins")
        this.pluginsPath.toFile().mkdirs()
    }

    def getBundleFromRepository(String bundleId) {
        if (bundleId == 'system.bundle') {
            bundleId = 'org.eclipse.osgi'
        }
        if (bundleVersions == null) {
            print 'Get artifacts definition from ' + repositoryUri.toString()
            bundleVersions = getAvailableArtifactVersions()
            println ' - finished. Found ' + bundleVersions.size() + ' osgi bundles'
        }
        def bundleAttributes = bundleVersions.get(bundleId)
        if (bundleAttributes == null) {
            throw new RuntimeException("Couldn't find bundle " + bundleId + " in repo " + repositoryUri.toString())
        }

        if (bundleAttributes.isDirectory) {
            return Paths.get(repositoryUri.resolve("plugins/").resolve(bundleId + "_" + bundleAttributes.version))
        }

        String jarName = bundleId + "_" + bundleAttributes.version + '.jar'
        java.nio.file.Path bundlePath = pluginsPath.resolve(jarName)
        downloadFile(repositoryUri.resolve("plugins/").resolve(jarName).toURL(), bundlePath)
        return bundlePath
    }

    Map<String, BundleAttributes> getAvailableArtifactVersions() {
        def artifactDom = getArtifactsDefinition()
        def repositoryElement = (Element) artifactDom.getElementsByTagName("repository").item(0)
        def artifactsElement = (Element) repositoryElement.getElementsByTagName("artifacts").item(0)
        def artifactsElements = artifactsElement.getElementsByTagName("artifact")
        return IntStream.range(0, artifactsElements.getLength())
                .mapToObj({ (Element) artifactsElements.item(it) })
                .filter({ 'osgi.bundle'.equalsIgnoreCase(it.getAttribute('classifier')) })
                .collect(Collectors.<Element, String, BundleAttributes> toMap(
                        { it.getAttribute("id") },
                        { mapBundleElement(it as Element) },
                        { version1, version2 ->
                            version1.version.numberAwareCompareTo(version2.version) > 0 ? version1 : version2
                        }
                ))
    }

    static BundleAttributes mapBundleElement(Element bundleElement) {
        def bundle = new BundleAttributes()
        bundle.version = bundleElement.getAttribute("version")
        bundle.isDirectory = isDirectoryBundle(bundleElement)
        return bundle
    }

    static boolean isDirectoryBundle(Element bundleElement) {
        def repoPropertiesElement = bundleElement.getElementsByTagName("repositoryProperties")
        if (repoPropertiesElement.length == 0) {
            return false
        }
        def repoProperties = (repoPropertiesElement.item(0) as Element).getElementsByTagName("property")
        return IntStream.range(0, repoProperties.getLength())
                .mapToObj({ (Element) repoProperties.item(it) })
                .filter({ 'artifact.folder' == it.getAttribute('name') })
                .map({ Boolean.valueOf(it.getAttribute('value')) })
                .findFirst()
                .orElse(Boolean.FALSE)
    }

    Document getArtifactsDefinition() {
        def artifactsJar = basePath.resolve("artifacts.jar")
        def artifactsXml = basePath.resolve("artifacts.xml")
        if (downloadFile(repositoryUri.resolve("artifacts.jar").toURL(), artifactsJar, true)) {
            unzipArtifactsJar(artifactsJar, artifactsXml)
        } else {
            downloadFile(repositoryUri.resolve("artifacts.xml").toURL(), artifactsXml)
        }
        return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(artifactsXml.toFile())
    }

    static def unzipArtifactsJar(java.nio.file.Path artifactsJar, java.nio.file.Path toArtifactsXml) {
        if (toArtifactsXml.toFile().exists()) {
            return
        }
        new ZipFile(artifactsJar.toFile()).withCloseable {
            it.getInputStream(it.getEntry('artifacts.xml')).withCloseable { inputStream ->
                new FileOutputStream(toArtifactsXml.toFile()).withCloseable {
                    def buffer = new byte[1024]
                    int readbytes
                    while ((readbytes = inputStream.read(buffer)) > 0) {
                        it.write(buffer, 0, readbytes)
                    }
                }
            }
        }
    }

    static boolean downloadFile(URL url, java.nio.file.Path toPath, boolean ignore404Responses = false) {
        def toFile = toPath.toFile()
        if (toFile.exists()) {
            return true
        }
        try {
            new FileOutputStream(toFile).withCloseable { outputStream ->
                print 'download ' + url.toString()
                url.openStream().withCloseable { inputStream ->
                    def buffer = new byte[1024]
                    int readbytes
                    while ((readbytes = inputStream.read(buffer)) > 0) {
                        outputStream.write(buffer, 0, readbytes)
                    }
                }
                println ' - finished'
                return null
            }
            return true
        } catch (IOException e) {
            if (ignore404Responses) {
                return false
            }
            toFile.delete()
            throw e
        }
    }
}

ext.p2Repo = new P2RepositoryLoader(new URI(eclipseRepository + '/'), projectDir.toPath())

private def recurseP2bundle(String name, Set<String> alreadyImportedBundles) {
    if (!alreadyImportedBundles.add(name)) {
        return files()
    }
    def jarFile = ((P2RepositoryLoader) ext.p2Repo).getBundleFromRepository(name)

    FileCollection dependencies
    if (jarFile.toFile().isDirectory()) {
        dependencies = fileTree(dir: jarFile, includes: ['**/*.class'])
    } else {
        dependencies = files(jarFile)
    }
    dependencies += analyzeBundleForTransitiveDependencies(jarFile, alreadyImportedBundles)
    return dependencies;
}

clean {
    delete '.p2cache'
}

def p2bundle(String name, String version = '') {
    def cacheKey = name + version
    if (Properties.cachedResolvedBundles.containsKey(cacheKey)) {
        return Properties.cachedResolvedBundles.get(cacheKey)
    }
    def resolvedDependencies = recurseP2bundle(name, new HashSet<>())
    Properties.cachedResolvedBundles.put(cacheKey, resolvedDependencies)
    return resolvedDependencies
}

static def formatBundlesInfoPath(String path) {
    return 'file:/' + path.replace('\\', '/')
}

def determineBundleActivation(String bundleId) {
    switch(bundleId) {
        case 'org.eclipse.osgi':
            return '-1,true'
        case 'org.eclipse.core.runtime':
            return '4,true'
        case 'org.eclipse.equinox.common':
            return '2,true'
        case 'org.eclipse.equinox.ds':
            return '1,true'
        case 'org.eclipse.equinox.simpleconfigurator':
            return '1,true'
        default:
            return '4,false'
    }
}

def generateBundlesInfo(boolean isTemplate) {
    file("${rootProject.buildDir}/bundles.info" + (isTemplate ? '.template' : '')).withWriter { w ->
        w.writeLine('#encoding=UTF-8')
        w.writeLine('#version=1')
        Properties.installedBundles.each {
            w.write(it.id + ',' + it.version + ',')
            if (isTemplate) {
                w.write('dependency:/' + it.path.getFileName().toString())
            } else {
                w.write(formatBundlesInfoPath(it.path.toString()))
            }
            w.writeLine(',' + determineBundleActivation(it.id))
        }
        subprojects.stream()
                .filter { it.projectDir.toPath().resolve('META-INF').resolve('MANIFEST.MF').toFile().exists()}
                .sorted({a, b -> a.name.compareTo(b.name)})
                .each {
                    def jarTask = it.getTasksByName('jar', false).first()
                    def bundleId = jarTask.archiveBaseName.get()
                    w.write(bundleId + ',' + jarTask.archiveVersion.get() + ',')
                    if (!isTemplate) {
                        w.write(formatBundlesInfoPath(it.projectDir.toString()) + '/')
                    } else {
                        w.write('project:/' + jarTask.archiveFileName.get())
                    }
                    w.writeLine(',' + determineBundleActivation(bundleId))
                }
    }
}

build {
    doFirst {
        mkdir rootProject.buildDir
        generateBundlesInfo(false)
        generateBundlesInfo(true)
    }
}

p2bundle('org.eclipse.osgi')
p2bundle('org.eclipse.equinox.simpleconfigurator')
p2bundle('org.eclipse.osgi.services')




